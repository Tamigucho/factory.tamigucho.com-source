PokemonList.js: divise by year (as seen in the "year" key in data/pokemons.json), showing a <h2> for every year and their pokemons








To divide the Pokemon list by year, you can first group the Pokemon data by the "year" key. Then, you can iterate over each group and display a <h2> for the year and the list of Pokemon for that year.

Here's a simplified example of how you can achieve this in your PokemonList.js file:

import React from 'react';
import { Link } from 'react-router-dom';
import pokemons from '../data/pokemons.json';

const PokemonList = () => {
  // Group pokemons by year
  const pokemonsByYear = pokemons.reduce((groups, pokemon) => {
    const year = pokemon.year;
    if (!groups[year]) {
      groups[year] = [];
    }
    groups[year].push(pokemon);
    return groups;
  }, {});

  return (
    <div className="pokemon-list">
      {Object.entries(pokemonsByYear).map(([year, pokemons]) => (
        <div key={year}>
          <h2>{year}</h2>
          {pokemons.map((pokemon) => (
            <Link key={pokemon.id} to={`/pokemon/${pokemon.id}`}>
              {pokemon.name}
            </Link>
          ))}
        </div>
      ))}
    </div>
  );
};

export default PokemonList;

In this code, we're using the reduce function to group the Pokemon by year. Then, we're using Object.entries to iterate over each year and its corresponding Pokemon. For each year, we're rendering a <h2> with the year and a list of links to each Pokemon's detail page.












Please don't use the /pokemon/{id} URL format, but keep the previous of /{Name}.









Sure, you can use the Pokemon's name instead of the id in the URL. Here's how you can modify the PokemonList.js file to achieve this:

import React from 'react';
import { Link } from 'react-router-dom';
import pokemons from '../data/pokemons.json';

const PokemonList = () => {
  // Group pokemons by year
  const pokemonsByYear = pokemons.reduce((groups, pokemon) => {
    const year = pokemon.year;
    if (!groups[year]) {
      groups[year] = [];
    }
    groups[year].push(pokemon);
    return groups;
  }, {});

  return (
    <div className="pokemon-list">
      {Object.entries(pokemonsByYear).map(([year, pokemons]) => (
        <div key={year}>
          <h2>{year}</h2>
          {pokemons.map((pokemon) => (
            <Link key={pokemon.id} to={`/${pokemon.name}`}>
              {pokemon.name}
            </Link>
          ))}
        </div>
      ))}
    </div>
  );
};

export default PokemonList;

In this code, the only change is in the Link component. Instead of using /pokemon/${pokemon.id}, we're now using /${pokemon.name}. This will generate URLs based on the Pokemon's name.









Now, please, I need every year to have a <span class="badge bg-secondary"></span> badge counting how many Pok√©mons are, in each year.









To add a badge that counts the number of Pokemons in each year, you can simply add a <span> element inside the <h2> element for each year. You can use the length property of the array of Pokemons for each year to get the count. Here's how you can modify the PokemonList.js file to achieve this:

// ...
{Object.entries(pokemonsByYear).map(([year, pokemons]) => (
  <div key={year}>
    <h2>
      {year} <span className="badge bg-secondary">{pokemons.length}</span>
    </h2>
    {pokemons.map((pokemon) => (
      <Link key={pokemon.id} to={`/${pokemon.name}`}>
        {pokemon.name}
      </Link>
    ))}
  </div>
))}
// ...

In this code, the only change is in the <h2> element. We've added a <span> element with the class "badge bg-secondary". The content of the <span> element is {pokemons.length}, which will display the number of Pokemons for the current year.
