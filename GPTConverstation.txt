/creatures page (components/CreaturesPage.js): add a Material Bootstrap paginator, showing a max of 10 Pokémons per page!
Example from Material Bootstrap React version:
<nav aria-label="...">
  <ul class="pagination">
    <li class="page-item disabled">
      <a class="page-link">Previous</a>
    </li>
    <li class="page-item"><a class="page-link" href="#">1</a></li>
    <li class="page-item active" aria-current="page">
      <a class="page-link" href="#">2 <span class="visually-hidden">(current)</span></a>
    </li>
    <li class="page-item"><a class="page-link" href="#">3</a></li>
    <li class="page-item">
      <a class="page-link" href="#">Next</a>
    </li>
  </ul>
</nav>







To add a Material Bootstrap paginator to the CreaturesPage component, you need to manage the state for the current page and the number of items per page. You also need to create a function to handle page changes.

First, add the following state variables to your CreaturesPage component:

const [currentPage, setCurrentPage] = useState(1);
const [itemsPerPage, setItemsPerPage] = useState(10);


Next, create a function to handle page changes:

const handlePageChange = (pageNumber) => {
  setCurrentPage(pageNumber);
};

Then, in your render method, calculate the index of the first and last item on the current page, and use these indices to get the items for the current page:

const indexOfLastItem = currentPage * itemsPerPage;
const indexOfFirstItem = indexOfLastItem - itemsPerPage;
const currentItems = pokemonsData.slice(indexOfFirstItem, indexOfLastItem);

Replace the pokemonsData in your map function with currentItems:

{currentItems.map((pokemon, index) => (
  <PokemonItem key={index} {...pokemon} />
))}


Finally, add the pagination component to your render method. You need to calculate the total number of pages and create a button for each page:

const totalPages = Math.ceil(pokemonsData.length / itemsPerPage);

<nav aria-label="Page navigation">
  <ul className="pagination">
    <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
      <a className="page-link" onClick={() => handlePageChange(currentPage - 1)}>Previous</a>
    </li>
    {[...Array(totalPages)].map((e, i) => (
      <li className={`page-item ${i + 1 === currentPage ? 'active' : ''}`} key={i}>
        <a className="page-link" onClick={() => handlePageChange(i + 1)}>{i + 1}</a>
      </li>
    ))}
    <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
      <a className="page-link" onClick={() => handlePageChange(currentPage + 1)}>Next</a>
    </li>
  </ul>
</nav>

In this code, we're creating a button for each page. The onClick handler for each button calls the handlePageChange function with the corresponding page number. The 'Previous' and 'Next' buttons decrease and increase the current page number, respectively. The 'disabled' class is added to these buttons when the current page is the first or last page, respectively.







Warning: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem. react.development.js:209
    React 4
    js CreaturesPage.js:6
    factory react refresh:6
    Webpack 11
Uncaught TypeError: dispatcher is null
    useState React
    js CreaturesPage.js:6
    factory react refresh:6
    Webpack 11
    





The error message you're seeing is related to the use of React Hooks. Hooks can only be called inside the body of a function component. They cannot be called outside a function component or inside regular JavaScript functions.

In your CreaturesPage.js file, you're calling the useState hook outside of a function component:

const [currentPage, setCurrentPage] = useState(1);
const [itemsPerPage, setItemsPerPage] = useState(10);


This is causing the error. To fix it, move these lines inside the CreaturesPage function:

const CreaturesPage = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  // rest of your code
};

This ensures that the hooks are being called inside a function component, which is a requirement for using hooks in React.








Please add a dropdown menu next to the pagination, where user can change how many Pokémons are displayed by default! Options:
- 10
- 20
- 50
- 100

Default always 10, to save bandwidth and memory.








To add a dropdown menu for changing the number of Pokémon displayed per page, you can use the select HTML element. You'll also need to add a new state variable to keep track of the selected value.

First, add a new state variable in your CreaturesPage component:

const [itemsPerPage, setItemsPerPage] = useState(10);

Then, add a select element to your component with options for 10, 20, 50, and 100. The onChange event handler updates the itemsPerPage state variable with the selected value:

<select value={itemsPerPage} onChange={(e) => setItemsPerPage(Number(e.target.value))}>
  <option value="10">10</option>
  <option value="20">20</option>
  <option value="50">50</option>
  <option value="100">100</option>
</select>

Place this select element next to your pagination component. When a user selects a new value from the dropdown, the itemsPerPage state variable will be updated, and the component will re-render with the new number of items per page.

Remember to update the calculation of indexOfLastItem and totalPages to use the new itemsPerPage state variable:

const indexOfLastItem = currentPage * itemsPerPage;
const indexOfFirstItem = indexOfLastItem - itemsPerPage;
const currentItems = pokemonsData.slice(indexOfFirstItem, indexOfLastItem);
const totalPages = Math.ceil(pokemonsData.length / itemsPerPage);

This ensures that the correct number of Pokémon are displayed on each page, and the correct number of pages are shown in the pagination component.
