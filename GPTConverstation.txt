About Home.js: let's add a "Featured Pokémons" at the top of the page!

Let's use the poke cards of PokemonItem.js.

Let's feature 11 Pokémons: Bulbasaur, Charmander, Pikachu, Caterpie, Pidgey, Ninjask, Alcremie, Wurmple, Regikraft, Regimeal!

This data will be present in src/data/creatures/featured.json!

Format:

<h1>Featured Phonemons/Tamiguchos</h1>
<p>Click them to see their details.</p>
{pokemon cards from PokemonItem.js; see TypePage.js and YearPage.js for inspiration}
<hr/>





To add a "Featured Pokémons" section at the top of the Home.js page, you need to create a new JSON file featured.json in the src/data/creatures/ directory. This file will contain the data of the featured pokémons.

The featured.json file should look like this:

[
  "Bulbasaur",
  "Charmander",
  "Pikachu",
  "Caterpie",
  "Pidgey",
  "Ninjask",
  "Alcremie",
  "Wurmple",
  "Regikraft",
  "Regimeal"
]


Then, import this data in Home.js:

import featuredPokemons from '../data/creatures/featured.json';


Next, you need to create a new state variable to store the featured pokémons data:

const [featured, setFeatured] = useState([]);



In the useEffect hook, set the featured state to the featured pokémons data:

useEffect(() => {
  setFeatured(featuredPokemons.map(name => pokemonsData.find(pokemon => pokemon.name === name)));
}, []);


Finally, render the featured pokémons at the top of the page using the PokemonItem component. You can refer to TypePage.js and YearPage.js for inspiration on how to use the PokemonItem component.

Here's how you can do it:

<h1>Featured Phonemons/Tamiguchos</h1>
<p>Click them to see their details.</p>
<div className="featured-pokemons">
  {featured.map(pokemon => (
    <PokemonItem key={pokemon.id} {...pokemon} />
  ))}
</div>
<hr/>


This will display the featured pokémons at the top of the Home.js page. Each featured pokémon will be displayed as a card, and clicking on a card will navigate to the details page of that pokémon.




VS Code:
Could not find name 'PokemonItem'. Did you mean 'PokemonList'?ts(2570)

Browser:
Uncaught runtime errors:
ERROR
PokemonItem is not defined
./src/components/Home.js/Home/<.children<.children<@http://localhost:3000/main.d313899f1c683c7784a4.hot-update.js:199:116
Home@http://localhost:3000/main.d313899f1c683c7784a4.hot-update.js:199:26






The error message you're seeing is because the PokemonItem component is not imported in Home.js. You need to import it at the top of your Home.js file.

Add this line to your imports:

import PokemonItem from './PokemonItem';


This line of code imports the PokemonItem component from the PokemonItem.js file, which is located in the same directory as Home.js.

After adding this import statement, you should be able to use PokemonItem in your Home.js file without any errors.





Uncaught runtime errors:
ERROR
PokemonItem is not defined
./src/components/Home.js/Home/<.children<.children<@http://localhost:3000/static/js/bundle.js:1258:116
Home@http://localhost:3000/static/js/bundle.js:1258:26

ERROR
Too many re-renders. React limits the number of renders to prevent an infinite loop.
renderWithHooks@http://localhost:3000/static/js/bundle.js:50396:19
mountIndeterminateComponent@http://localhost:3000/static/js/bundle.js:53670:17

Seems like that old issue:
Trying to read a variable before it exist/become available.







The error "PokemonItem is not defined" is because the PokemonItem component is not imported in Home.js. You need to import it at the top of your Home.js file.

Add this line to your imports:

import PokemonItem from './PokemonItem';


The error "Too many re-renders. React limits the number of renders to prevent an infinite loop." is likely because you're calling setFeatured directly in the component body or in a function that's called during the render process. This causes a state update, which triggers a re-render, which calls setFeatured again, and so on.

You should call setFeatured inside a useEffect hook, which will ensure it's only called when the component mounts and when the dependencies change.

Here's how you can do it:

useEffect(() => {
  setFeatured(featuredPokemons.map(name => pokemonsData.find(pokemon => pokemon.name === name)));
}, [pokemonsData, featuredPokemons]);


This code will run once when the component mounts, and then again whenever pokemonsData or featuredPokemons changes.
