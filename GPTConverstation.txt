For some reason, unlike in Header.js, the "Math.max(...pokemons.map(pokemon => pokemon.year));" is returning "-Infinity".
Maybe because it is loading too soon before getting data?

Examples where it is happening in Home.js at browser:

"Digital animals created since 2010 to -Infinity by Daniella Mesquita."

"new tami creatures:
growth from 2010 to -Infinity"





The issue you're experiencing is likely due to the pokemons array being empty when Math.max(...pokemons.map(pokemon => pokemon.year)) is called. When Math.max() is called with an empty array, it returns -Infinity.

In the provided code, pokemons is initialized as an empty array:

const [pokemons, setPokemons] = useState([]);

However, there's no code provided that updates pokemons with actual data. This means that when Math.max(...pokemons.map(pokemon => pokemon.year)) is called, pokemons is still an empty array.

To fix this, you need to ensure that pokemons is populated with data before the component renders. You can do this by fetching your data in a useEffect hook and updating pokemons with the fetched data. Here's a basic example:

useEffect(() => {
  // Fetch your data here and update pokemons with the fetched data.
  // This is just a placeholder, replace it with your actual data fetching logic.
  fetchYourData().then(fetchedData => setPokemons(fetchedData));
}, []); // Empty dependency array means this effect runs once on mount.

Remember to replace fetchYourData() with your actual data fetching logic. Once pokemons is populated with data, Math.max(...pokemons.map(pokemon => pokemon.year)) should return the expected result.








What's "fetchYourData"? Where exactly to put the useEffect, and what exactly to move/place inside it?! OMG









"fetchYourData" is a placeholder for the function or method you would use to fetch or retrieve your data. In your case, you're using a local JSON file to store your data, so you don't need to fetch data from a server. Instead, you can import the data directly into your component.

The useEffect hook should be placed inside your component, typically after your useState declarations and before your return statement.

Here's how you can modify your Home.js component to ensure that pokemons is populated with data before the component renders:

import React, { useState, useEffect } from 'react';
import Chart from 'react-apexcharts';
import pokemonsData from '../data/pokemons.json'; // Import the Pokemon data
import PokemonList from './PokemonList';

function Home() {
  const [pokemons, setPokemons] = useState([]);

  useEffect(() => {
    setPokemons(pokemonsData); // Set pokemons to pokemonsData
  }, []); // Empty dependency array means this effect runs once on mount.

  // ... rest of your component
}

In the above code, I've added a useEffect hook that runs once when the component mounts. Inside this hook, I'm calling setPokemons with pokemonsData to populate pokemons with your data. Now, when Math.max(...pokemons.map(pokemon => pokemon.year)) is called, pokemons should be populated with data, and it should return the expected result.








Uncaught ReferenceError: creatureCount is not defined
    App App.js:36
    React 11
    workLoop scheduler.development.js:266
    flushWork scheduler.development.js:239
    performWorkUntilDeadline scheduler.development.js:533
    








The error message "Uncaught ReferenceError: creatureCount is not defined" is indicating that the variable creatureCount is not defined in the scope where it's being used. In your case, it's being used in App.js:

<Header creatureCount={creatureCount} />

However, creatureCount is not defined anywhere in App.js. To fix this, you need to define creatureCount in App.js. If creatureCount is supposed to represent the number of creatures (or pokemons), you can define it as the length of the pokemons array:

const creatureCount = pokemons.length;

Here's how you can modify your App.js component:

function App() {
  const [pokemons, setPokemons] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    setPokemons(pokemonsData); // Set pokemons to pokemonsData
  }, []); // Empty dependency array means this effect runs once on mount.

  const creatureCount = pokemons.length; // Define creatureCount

  // ... rest of your component
}

In the above code, I've added a new line to define creatureCount as the length of the pokemons array. Now, when you pass creatureCount as a prop to the Header component, it should be defined.






Still:
Browser:
Uncaught runtime errors:
ERROR
creatureCount is not defined
App@http://localhost:3000/static/js/bundle.js:80:7
renderWithHooks@http://localhost:3000/static/js/bundle.js:50244:31

ERROR
searchTerm is not defined
./src/components/Home.js/Home/filteredPokemons<@http://localhost:3000/static/js/bundle.js:1075:91
Home@http://localhost:3000/static/js/bundle.js:1075:37
renderWithHooks@http://localhost:3000/static/js/bundle.js:50244:31

App.js in Cursor/VS Code:
'searchTerm' is declared but its value is never read.ts(6133)









The error messages indicate that creatureCount and searchTerm are not defined in the scope where they're being used.

In App.js, you're using creatureCount as a prop for the Header component, but it's not defined anywhere in App.js. You can define creatureCount as the length of the pokemons array:

const creatureCount = pokemons.length;

In Home.js, you're using searchTerm in the filteredPokemons function, but it's not defined anywhere in Home.js. You can define searchTerm as a state variable:

const [searchTerm, setSearchTerm] = useState('');

Here's how you can modify your App.js and Home.js components:

App.js:

import pokemonsData from './data/pokemons.json'; // Import the Pokemon data

function App() {
  const [pokemons, setPokemons] = useState([]);

  useEffect(() => {
    setPokemons(pokemonsData); // Set pokemons to pokemonsData
  }, []); // Empty dependency array means this effect runs once on mount.

  const creatureCount = pokemons.length; // Define creatureCount

  // ... rest of your component
}

Home.js:

function Home() {
  const [pokemons, setPokemons] = useState([]);
  const [searchTerm, setSearchTerm] = useState(''); // Define searchTerm

  useEffect(() => {
    setPokemons(pokemonsData); // Set pokemons to pokemonsData
  }, []); // Empty dependency array means this effect runs once on mount.

  // ... rest of your component
}

In the above code, I've added new lines to define creatureCount and searchTerm. Now, when you use these variables in your components, they should be defined.
